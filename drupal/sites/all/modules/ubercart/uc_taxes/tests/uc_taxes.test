<?php

/**
 * @file
 * Tax tests.
 */

/**
 * Tests the inclusive taxes functionality.
 */
class UbercartInclusiveTaxesTestCase extends UbercartTestHelper {

  public static function getInfo() {
    return array(
      'name' => 'Inclusive taxes',
      'description' => 'Ensures that inclusive taxes are calculated and displayed correctly.',
      'group' => 'Ubercart',
    );
  }

  function setUp() {
    $modules = array('uc_product_kit', 'uc_attribute', 'uc_taxes');
    $permissions = array();
    parent::setUp($modules, $permissions);
  }

  function testProductKitAttributes() {
    $this->drupalLogin($this->adminUser);

    // Create a 20% inclusive tax rate.
    $rate = (object) array(
      'id' => 0, // TODO: should not have to set this
      'name' => $this->randomName(8),
      'rate' => 0.2,
      'taxed_product_types' => array('product'),
      'taxed_line_items' => array(),
      'weight' => 0,
      'shippable' => 0,
      'display_include' => 1,
      'inclusion_text' => '',
    );
    uc_taxes_rate_save($rate);

    // Create a $10 product.
    $product = $this->createProduct(array(
      'sell_price' => 10,
    ));

    // Create an attribute.
    $attribute = (object) array(
      'name' => $this->randomName(8),
      'label' => $this->randomName(8),
      'description' => $this->randomName(8),
      'required' => TRUE,
      'display' => 1,
      'ordering' => 0,
    );
    uc_attribute_save($attribute);

    // Create an option with a price adjustment of $5.
    $option = (object) array(
      'aid' => $attribute->aid,
      'name' => $this->randomName(8),
      'cost' => 0,
      'price' => 5,
      'weight' => 0,
      'ordering' => 0,
    );
    uc_attribute_option_save($option);

    // Attach the attribute to the product.
    $attribute = uc_attribute_load($attribute->aid);
    uc_attribute_subject_save($attribute, 'product', $product->nid, TRUE);

    // Create a product kit containing the product.
    $kit = $this->drupalCreateNode(array(
      'type' => 'product_kit',
      'products' => array($product->nid),
      'ordering' => 0,
      'mutable' => UC_PRODUCT_KIT_UNMUTABLE_WITH_LIST,
    ));

    // Set the kit total to $9 to automatically apply a discount.
    $kit = node_load($kit->nid);
    $kit->kit_total = 9;
    node_save($kit);
    $kit = node_load($kit->nid);
    $this->assertEqual($kit->products[$product->nid]->discount, -1, 'Product kit component has correct discount applied.');

    // Add the product kit to the cart, selecting the option.
    $attribute_key = 'products[' . $product->nid . '][attributes][' . $attribute->aid . ']';
    $this->drupalPost('node/' . $kit->nid, array($attribute_key => $option->oid), t('Add to cart'));

    // Check that the subtotal is $16.80 ($10 base + $5 option - $1 discount, with 20% tax)
    $this->drupalGet('cart');
    $this->assertText('Subtotal: $16.80', 'Order subtotal is correct.');
  }
}

/**
 * Tests
 */
class UbercartStoredTaxesTestCase extends UbercartTestHelper {

  function getInfo() {
    return array(
      'name' => 'Stored tax data',
      'description' => 'Ensures that historical tax data is stored correctly, and that the proper amount is displayed.',
      'group' => 'Ubercart',
    );
  }

  function setUp() {
    $modules = array('uc_cart', 'uc_payment', 'uc_payment_pack', 'uc_taxes');
    $permissions = array('administer rules', 'configure taxes');
    parent::setUp($modules, $permissions);
  }

  function testTaxDisplay() {
    $this->drupalLogin($this->adminUser);

    // Enable a payment method for the payment preview checkout pane.
    $edit = array('uc_payment_method_check_checkout' => 1);
    $this->drupalPost('admin/store/settings/payment', $edit, t('Save configuration'));

    // Create a 20% inclusive tax rate.
    $rate = (object) array(
      'id' => 0, // TODO: should not have to set this
      'name' => $this->randomName(8),
      'rate' => 0.2,
      'taxed_product_types' => array('product'),
      'taxed_line_items' => array(),
      'weight' => 0,
      'shippable' => 0,
      'display_include' => 1,
      'inclusion_text' => '',
    );
    uc_taxes_rate_save($rate);

    // Ensure Rules picks up the new condition.
    entity_flush_caches();

    $this->drupalGet('admin/store/settings/taxes');
    $this->assertText($rate->name, t('Tax was saved successfully.'));

    $this->drupalGet("admin/store/settings/taxes/manage/uc_taxes_$rate->id");
    $this->assertText(t('Conditions'), t('Rules configuration linked to tax.'));

    $this->drupalPost('node/' . $this->product->nid, array(), t('Add to cart'));

    // Manually step through checkout. $this->checkout() doesn't know about taxes.
    $this->drupalPost('cart', array(), 'Checkout');
    $this->assertText(
      t('Enter your billing address and information here.'),
      t('Viewed cart page: Billing pane has been displayed.')
    );
    $this->assertRaw($rate->name, t('Tax line item displayed.'));
    $this->assertRaw(uc_currency_format($rate->rate * $this->product->sell_price), t('Correct tax amount displayed.'));

    // Build the panes.
    $zone_id = db_query('SELECT zone_id FROM {uc_zones} WHERE zone_country_id = :country ORDER BY rand() LIMIT 1', array('country' => variable_get('uc_store_country', 840)))->fetchField();
    $edit = array(
      'panes[delivery][delivery_first_name]' => $this->randomName(10),
      'panes[delivery][delivery_last_name]' => $this->randomName(10),
      'panes[delivery][delivery_street1]' => $this->randomName(10),
      'panes[delivery][delivery_city]' => $this->randomName(10),
      'panes[delivery][delivery_zone]' => $zone_id,
      'panes[delivery][delivery_postal_code]' => mt_rand(10000, 99999),

      'panes[billing][billing_first_name]' => $this->randomName(10),
      'panes[billing][billing_last_name]' => $this->randomName(10),
      'panes[billing][billing_street1]' => $this->randomName(10),
      'panes[billing][billing_city]' => $this->randomName(10),
      'panes[billing][billing_zone]' => $zone_id,
      'panes[billing][billing_postal_code]' => mt_rand(10000, 99999),
    );

    // Submit the checkout page.
    $this->drupalPost('cart/checkout', $edit, t('Review order'));
    $this->assertRaw(t('Your order is almost complete.'));
    $this->assertRaw($rate->name, t('Tax line item displayed.'));
    $this->assertRaw(uc_currency_format($rate->rate * $this->product->sell_price), t('Correct tax amount displayed.'));

    // Complete the review page.
    $this->drupalPost(NULL, array(), t('Submit order'));

    $order_id = db_query("SELECT order_id FROM {uc_orders} WHERE delivery_first_name = :name", array(':name' => $edit['panes[delivery][delivery_first_name]']))->fetchField();
    if ($order_id) {
      $this->pass(
        t('Order %order_id has been created', array('%order_id' => $order_id))
      );

      $order = uc_order_load($order_id);
      foreach ($order->line_items as $line) {
        if ($line['type'] == 'tax') {
          break;
        }
      }
      $this->drupalGet('admin/store/orders/' . $order_id . '/edit');
      $this->assertFieldByName('line_items['. $line['line_item_id'] .'][li_id]', $line['line_item_id'], t('Found the tax line item ID.'));
      $this->assertText($line['title'], t('Found the tax title.'));
      $this->assertText(uc_currency_format($line['amount']), t('Tax has the correct amount.'));

      $this->drupalPost('admin/store/orders/' . $order_id . '/edit', array(), t('Submit changes'));
      $this->assertText(t('Order changes saved.'));
      $this->assertFieldByName('line_items['. $line['line_item_id'] .'][li_id]', $line['line_item_id'], t('Found the same tax line item ID.'));
      $this->assertText($line['title'], t('Found the tax title.'));
      $this->assertText(uc_currency_format($line['amount']), t('Tax has the same amount as before.'));

      $rate->rate = 0.1;
      $rate = uc_taxes_rate_save($rate);

      // Ensure Rules picks up the new condition.
      entity_flush_caches();

      $this->drupalPost('admin/store/orders/' . $order_id . '/edit', array(), t('Submit changes'));
      $this->assertText(t('Order changes saved.'));
      $this->assertFieldByName('line_items['. $line['line_item_id'] .'][li_id]', $line['line_item_id'], t('Found the same tax line item ID.'));
      $this->assertText($line['title'], t('Found the tax title.'));
      $this->assertText(uc_currency_format($rate->rate * $this->product->sell_price), t('Tax has new amount.'));

      uc_order_update_status($order_id, 'completed');

      $order = uc_order_load($order_id);
      foreach ($order->line_items as $line) {
        if ($line['type'] == 'tax') {
          break;
        }
      }

      $this->assertTrue(number_format($rate->rate * $this->product->sell_price, 2) == number_format($line['amount'], 2), t('Stored tax line item has the correct amount.'));

      $rate->rate = 0.3;
      $rate = uc_taxes_rate_save($rate);

      // Ensure Rules picks up the new condition.
      entity_flush_caches();

      $this->drupalPost('admin/store/orders/' . $order_id . '/edit', array(), t('Submit changes'));
      $this->assertText(t('Order changes saved.'));
      $this->assertFieldByName('line_items['. $line['line_item_id'] .'][li_id]', $line['line_item_id'], t('Found the same tax line item ID.'));
      $this->assertText($line['title'], t('Found the tax title.'));
      $this->assertText(uc_currency_format($line['amount']), t('Tax has the same amount as before.'));
    }
    else {
      $this->fail(t('No order was created.'));
    }
  }

}
